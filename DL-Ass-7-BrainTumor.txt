import tensorflow as tf
from tensorflow.keras.layers import Conv2D, Dense, Flatten, Dropout, MaxPool2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras.models import Sequential
import numpy as np
import matplotlib.pyplot as plt

# Define paths to the dataset
path = "D:/Work/python/dl_clg/datasets/Brain_Tumor/Training"
path2 = "D:/Work/python/dl_clg/datasets/Brain_Tumor/Testing"

# ImageDataGenerator for preprocessing
data_generator = ImageDataGenerator(rescale=1.0/255)

# Load training and testing data
trainData = data_generator.flow_from_directory(
    path,
    target_size=(64, 64),
    batch_size=32,
    class_mode='categorical'
)
testData = data_generator.flow_from_directory(
    path2,
    target_size=(64, 64),
    batch_size=32,
    class_mode='categorical'
)

# Define the CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
    MaxPool2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPool2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPool2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(4, activation='softmax')
])

# Compile the model
model.compile(loss="categorical_crossentropy", metrics=['accuracy'], optimizer='adam')

# Train the model
history = model.fit(trainData, epochs=5, validation_data=testData, batch_size=32)

# Plot training history
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val accuracy')

# Add prediction functionality for a new image
def predict_image(image_path, model, class_labels):
    # Load the image
    img = load_img(image_path, target_size=(64, 64))  # Resize the image to 64x64
    img_array = img_to_array(img)  # Convert image to array
    img_array = img_array / 255.0  # Rescale the image

    # Add an extra dimension for batch size (1 image)
    img_array = np.expand_dims(img_array, axis=0)

    # Make prediction
    prediction = model.predict(img_array)

    # Get the class label with the highest probability
    predicted_class = np.argmax(prediction)

    # Display the result
    print(f"Predicted Class: {class_labels[predicted_class]}")
    
    # Optionally, display the image
    plt.imshow(img)
    plt.title(f"Prediction: {class_labels[predicted_class]}")
    plt.show()

# Class labels (adjust these as per your actual classes)
class_labels = ['Class_0', 'Class_1', 'Class_2', 'Class_3']  # Replace with actual class names

# Predict a sample image (change 'sample_image.jpg' to the path of the image you want to predict)
predict_image("path_to_sample_image.jpg", model, class_labels)
